import("//electron/build/asar.gni")
_protocol_generated = [
  "node/inspector/protocol/Forward.h",
  "node/inspector/protocol/Protocol.cpp",
  "node/inspector/protocol/Protocol.h",
  "node/inspector/protocol/NodeTracing.cpp",
  "node/inspector/protocol/NodeTracing.h",
]

declare_args() {
  node_enable_inspector = true
  node_use_openssl = true
  node_openssl_system_ca_path = ""
  node_use_v8_platform = false
  node_use_dtrace = false
  node_use_etw = false
  node_use_perfctr = false
  node_debug_lib = false
}

assert(!node_enable_inspector || node_use_openssl,
       "node_enable_inspector requires node_use_openssl")

group("electron_node") {
  public_deps = [
    ":node_lib",
  ]
}

config("node_internals") {
  defines = [ "NODE_WANT_INTERNALS=1" ]
}

library_files = [
  "lib/internal/bootstrap/loaders.js",
  "lib/internal/bootstrap/node.js",
  "lib/async_hooks.js",
  "lib/assert.js",
  "lib/buffer.js",
  "lib/child_process.js",
  "lib/console.js",
  "lib/constants.js",
  "lib/crypto.js",
  "lib/cluster.js",
  "lib/dgram.js",
  "lib/dns.js",
  "lib/domain.js",
  "lib/events.js",
  "lib/fs.js",
  "lib/http.js",
  "lib/http2.js",
  "lib/_http_agent.js",
  "lib/_http_client.js",
  "lib/_http_common.js",
  "lib/_http_incoming.js",
  "lib/_http_outgoing.js",
  "lib/_http_server.js",
  "lib/https.js",
  "lib/inspector.js",
  "lib/module.js",
  "lib/net.js",
  "lib/os.js",
  "lib/path.js",
  "lib/perf_hooks.js",
  "lib/process.js",
  "lib/punycode.js",
  "lib/querystring.js",
  "lib/readline.js",
  "lib/repl.js",
  "lib/stream.js",
  "lib/_stream_readable.js",
  "lib/_stream_writable.js",
  "lib/_stream_duplex.js",
  "lib/_stream_transform.js",
  "lib/_stream_passthrough.js",
  "lib/_stream_wrap.js",
  "lib/string_decoder.js",
  "lib/sys.js",
  "lib/timers.js",
  "lib/tls.js",
  "lib/_tls_common.js",
  "lib/_tls_wrap.js",
  "lib/trace_events.js",
  "lib/tty.js",
  "lib/url.js",
  "lib/util.js",
  "lib/v8.js",
  "lib/vm.js",
  "lib/zlib.js",
  "lib/internal/assert.js",
  "lib/internal/async_hooks.js",
  "lib/internal/buffer.js",
  "lib/internal/cli_table.js",
  "lib/internal/child_process.js",
  "lib/internal/cluster/child.js",
  "lib/internal/cluster/master.js",
  "lib/internal/cluster/round_robin_handle.js",
  "lib/internal/cluster/shared_handle.js",
  "lib/internal/cluster/utils.js",
  "lib/internal/cluster/worker.js",
  "lib/internal/crypto/certificate.js",
  "lib/internal/crypto/cipher.js",
  "lib/internal/crypto/diffiehellman.js",
  "lib/internal/crypto/hash.js",
  "lib/internal/crypto/pbkdf2.js",
  "lib/internal/crypto/random.js",
  "lib/internal/crypto/sig.js",
  "lib/internal/crypto/util.js",
  "lib/internal/constants.js",
  "lib/internal/encoding.js",
  "lib/internal/errors.js",
  "lib/internal/fixed_queue.js",
  "lib/internal/freelist.js",
  "lib/internal/fs/promises.js",
  "lib/internal/fs/utils.js",
  "lib/internal/http.js",
  "lib/internal/inspector_async_hook.js",
  "lib/internal/linkedlist.js",
  "lib/internal/modules/cjs/helpers.js",
  "lib/internal/modules/cjs/loader.js",
  "lib/internal/modules/esm/loader.js",
  "lib/internal/modules/esm/create_dynamic_module.js",
  "lib/internal/modules/esm/default_resolve.js",
  "lib/internal/modules/esm/module_job.js",
  "lib/internal/modules/esm/module_map.js",
  "lib/internal/modules/esm/translators.js",
  "lib/internal/safe_globals.js",
  "lib/internal/net.js",
  "lib/internal/os.js",
  "lib/internal/process/esm_loader.js",
  "lib/internal/process/next_tick.js",
  "lib/internal/process/promises.js",
  "lib/internal/process/stdio.js",
  "lib/internal/process/warning.js",
  "lib/internal/process.js",
  "lib/internal/querystring.js",
  "lib/internal/process/write-coverage.js",
  "lib/internal/readline.js",
  "lib/internal/repl.js",
  "lib/internal/repl/await.js",
  "lib/internal/socket_list.js",
  "lib/internal/test/binding.js",
  "lib/internal/test/unicode.js",
  "lib/internal/timers.js",
  "lib/internal/tls.js",
  "lib/internal/trace_events_async_hooks.js",
  "lib/internal/tty.js",
  "lib/internal/url.js",
  "lib/internal/util.js",
  "lib/internal/util/comparisons.js",
  "lib/internal/util/inspector.js",
  "lib/internal/util/types.js",
  "lib/internal/http2/core.js",
  "lib/internal/http2/compat.js",
  "lib/internal/http2/util.js",
  "lib/internal/v8_prof_polyfill.js",
  "lib/internal/v8_prof_processor.js",
  "lib/internal/stream_base_commons.js",
  "lib/internal/vm/module.js",
  "lib/internal/streams/lazy_transform.js",
  "lib/internal/streams/async_iterator.js",
  "lib/internal/streams/buffer_list.js",
  "lib/internal/streams/duplexpair.js",
  "lib/internal/streams/legacy.js",
  "lib/internal/streams/destroy.js",
  "lib/internal/streams/state.js",
  "lib/internal/streams/pipeline.js",
  "lib/internal/streams/end-of-stream.js",
  "lib/internal/wrap_js_stream.js",
  "deps/v8/tools/splaytree.js",
  "deps/v8/tools/codemap.js",
  "deps/v8/tools/consarray.js",
  "deps/v8/tools/csvparser.js",
  "deps/v8/tools/profile.js",
  "deps/v8/tools/profile_view.js",
  "deps/v8/tools/logreader.js",
  "deps/v8/tools/arguments.js",
  "deps/v8/tools/tickprocessor.js",
  "deps/v8/tools/SourceMap.js",
  "deps/v8/tools/tickprocessor-driver.js",
  "deps/node-inspect/lib/_inspect.js",
  "deps/node-inspect/lib/internal/inspect_client.js",
  "deps/node-inspect/lib/internal/inspect_repl.js",
  "deps/acorn/dist/acorn.js",
  "deps/acorn/dist/walk.js",
]

copy("node_js2c_inputs") {
  sources = library_files
  outputs = [
    "$target_gen_dir/js2c_inputs/{{source_target_relative}}",
  ]
}

chdir_action("node_js2c") {
  deps = [
    ":node_js2c_inputs",
  ]
  cwd = "$target_gen_dir/js2c_inputs"
  write_file("$target_gen_dir/js2c_inputs/config.gypi", [ "{'variables':{}}" ])
  sources = library_files + [ "$target_gen_dir/js2c_inputs/config.gypi" ]
  outputs = [
    "$target_gen_dir/node_javascript.cc",
  ]
  script = "tools/js2c.py"
  macro_inputs = []
  if (!node_use_dtrace && !node_use_etw) {
    macro_inputs += [ "src/notrace_macros.py" ]
  }
  if (!node_use_perfctr) {
    macro_inputs += [ "src/noperfctr_macros.py" ]
  }
  if (node_debug_lib) {
    macro_inputs += [ "tools/nodcheck_macros.py" ]
  } else {
    macro_inputs += [ "tools/dcheck_macros.py" ]
  }
  args = rebase_path(outputs) + library_files + [ "config.gypi" ] +
         rebase_path(macro_inputs + [ "tools/check_macros.py" ])
}

config("node_lib_config") {
  include_dirs = [ "src" ]
  defines = []
  if (node_enable_inspector) {
    defines += [ "HAVE_INSPECTOR=1" ]
  } else {
    defines += [ "HAVE_INSPECTOR=0" ]
  }
  if (node_use_openssl) {
    defines += [ "HAVE_OPENSSL=1" ]
  } else {
    defines += [ "HAVE_OPENSSL=0" ]
  }
}

static_library("node_lib") {
  deps = [
    ":node_js2c",
    "deps/cares",
    "deps/http_parser",
    "deps/nghttp2",
    "//third_party/zlib",
  ]
  public_deps = [
    "deps/uv",
    "//v8",
  ]
  public_configs = [ ":node_lib_config" ]
  include_dirs = [ "src" ]
  cflags_cc = [
    "-Wno-unused-variable",
    "-Wno-deprecated-declarations",
    "-Wno-implicit-fallthrough",
    "-Wno-unused-private-field",
  ]
  defines = [
    "NODE_ARCH=\"$target_cpu\"",
    "NODE_PLATFORM=\"$target_os\"",
    "NODE_WANT_INTERNALS=1",
  ]
  if (is_win) {
    defines -= [ "NODE_PLATFORM=\"$target_os\"" ]
    defines += [
      "NODE_PLATFORM=\"win32\"",
      "NOMINMAX",
      "_UNICODE=1",
    ]
  } else {
    defines += [ "__POSIX__" ]
  }
  sources = [
    "$target_gen_dir/node_javascript.cc",
    "src/aliased_buffer.h",
    "src/async_wrap-inl.h",
    "src/async_wrap.cc",
    "src/async_wrap.h",
    "src/base_object-inl.h",
    "src/base_object.h",
    "src/callback_scope.cc",
    "src/callback_scope.h",
    "src/cares_wrap.cc",
    "src/connect_wrap.cc",
    "src/connect_wrap.h",
    "src/connection_wrap.cc",
    "src/connection_wrap.h",
    "src/env-inl.h",
    "src/env.cc",
    "src/env.h",
    "src/exceptions.cc",
    "src/exceptions.h",
    "src/fs_event_wrap.cc",
    "src/handle_wrap.cc",
    "src/handle_wrap.h",
    "src/js_stream.cc",
    "src/js_stream.h",
    "src/module_wrap.cc",
    "src/module_wrap.h",
    "src/node.cc",
    "src/node.h",
    "src/node_api.cc",
    "src/node_api.h",
    "src/node_api_types.h",
    "src/node_buffer.cc",
    "src/node_buffer.h",
    "src/node_config.cc",
    "src/node_constants.cc",
    "src/node_constants.h",
    "src/node_contextify.cc",
    "src/node_contextify.h",
    "src/node_debug_options.cc",
    "src/node_debug_options.h",
    "src/node_domain.cc",
    "src/node_errors.h",
    "src/node_file.cc",
    "src/node_file.h",
    "src/node_http2.cc",
    "src/node_http2.h",
    "src/node_http2_state.h",
    "src/node_http_parser.cc",
    "src/node_i18n.cc",
    "src/node_i18n.h",
    "src/node_internals.h",
    "src/node_javascript.h",
    "src/node_mutex.h",
    "src/node_os.cc",
    "src/node_perf.cc",
    "src/node_perf.h",
    "src/node_perf_common.h",
    "src/node_persistent.h",
    "src/node_platform.cc",
    "src/node_platform.h",
    "src/node_postmortem_metadata.cc",
    "src/node_revert.h",
    "src/node_root_certs.h",
    "src/node_serdes.cc",
    "src/node_stat_watcher.cc",
    "src/node_trace_events.cc",
    "src/node_types.cc",
    "src/node_url.cc",
    "src/node_util.cc",
    "src/node_v8.cc",
    "src/node_version.h",
    "src/node_watchdog.cc",
    "src/node_watchdog.h",
    "src/node_wrap.h",
    "src/node_zlib.cc",
    "src/pipe_wrap.cc",
    "src/pipe_wrap.h",
    "src/process_wrap.cc",
    "src/req_wrap-inl.h",
    "src/req_wrap.h",
    "src/signal_wrap.cc",
    "src/spawn_sync.cc",
    "src/stream_base-inl.h",
    "src/stream_base.cc",
    "src/stream_base.h",
    "src/stream_pipe.cc",
    "src/stream_pipe.h",
    "src/stream_wrap.cc",
    "src/stream_wrap.h",
    "src/string_bytes.cc",
    "src/string_bytes.h",
    "src/string_decoder-inl.h",
    "src/string_decoder.cc",
    "src/string_decoder.h",
    "src/tcp_wrap.cc",
    "src/tcp_wrap.h",
    "src/timer_wrap.cc",
    "src/tracing/agent.cc",
    "src/tracing/agent.h",
    "src/tracing/node_trace_buffer.cc",
    "src/tracing/node_trace_buffer.h",
    "src/tracing/node_trace_writer.cc",
    "src/tracing/node_trace_writer.h",
    "src/tracing/trace_event.cc",
    "src/tracing/trace_event.h",
    "src/tty_wrap.cc",
    "src/tty_wrap.h",
    "src/udp_wrap.cc",
    "src/udp_wrap.h",
    "src/util-inl.h",
    "src/util.cc",
    "src/util.h",
    "src/uv.cc",
  ]
  if (is_win) {
    sources += [ "src/backtrace_win32.cc" ]
  } else {
    sources += [ "src/backtrace_posix.cc" ]
  }

  if (node_enable_inspector) {
    sources += [
      "src/inspector/node_string.cc",
      "src/inspector/node_string.h",
      "src/inspector/tracing_agent.cc",
      "src/inspector/tracing_agent.h",
      "src/inspector_agent.cc",
      "src/inspector_agent.h",
      "src/inspector_io.cc",
      "src/inspector_io.h",
      "src/inspector_js_api.cc",
      "src/inspector_socket.cc",
      "src/inspector_socket.h",
      "src/inspector_socket_server.cc",
      "src/inspector_socket_server.h",
    ]
    sources += rebase_path(_protocol_generated, ".", target_gen_dir)
    deps += [
      ":protocol_generated_sources",
      ":v8_inspector_compress_protocol_json",
    ]
    include_dirs += [ "$target_gen_dir" ]
  }

  if (node_use_openssl) {
    deps += [ "//third_party/boringssl" ]
    sources += [
      "src/node_crypto.cc",
      "src/node_crypto.h",
      "src/node_crypto_bio.cc",
      "src/node_crypto_bio.h",
      "src/node_crypto_clienthello.cc",
      "src/node_crypto_clienthello.h",
      "src/tls_wrap.cc",
      "src/tls_wrap.h",
    ]
    defines += [
      "NODE_OPENSSL_SYSTEM_CERT_PATH=\"$node_openssl_system_ca_path\"",
      "EVP_CTRL_AEAD_SET_IVLEN=EVP_CTRL_GCM_SET_IVLEN",
      "EVP_CTRL_CCM_SET_TAG=EVP_CTRL_GCM_SET_TAG",
      "EVP_CTRL_AEAD_GET_TAG=EVP_CTRL_GCM_GET_TAG",
    ]
    cflags_cc += [ "-Wno-sign-compare" ]
  }
  if (node_use_v8_platform) {
    defines += [ "NODE_USE_V8_PLATFORM=1" ]
  } else {
    defines += [ "NODE_USE_V8_PLATFORM=0" ]
  }
}

import("//v8/gni/v8.gni")
_inspector_protocol = v8_path_prefix + "/third_party/inspector_protocol"
import("$_inspector_protocol/inspector_protocol.gni")

node_inspector_path = "src/inspector"

action("prepare_protocol_json") {
  sources = [
    "$node_inspector_path/node_protocol.pdl",
  ]
  outputs = [
    "$target_gen_dir/node_protocol.json",
  ]
  script = "//v8/third_party/inspector_protocol/ConvertProtocolToJSON.py"
  args = rebase_path(sources + outputs, root_build_dir)
}

inspector_protocol_generate("protocol_generated_sources") {
  write_file("$target_gen_dir/node/inspector/protocol/.dummy", "")
  deps = [
    ":prepare_protocol_json",
  ]
  visibility = [ ":*" ]  # Only targets in this file can depend on this.

  inspector_protocol_dir = _inspector_protocol
  out_dir = target_gen_dir
  config_file = "$node_inspector_path/node_protocol_config.json"
  inputs = [
    "$target_gen_dir/node_protocol.json",
    "$node_inspector_path/node_protocol_config.json",
  ]
  outputs = _protocol_generated
}

import("//tools/v8_context_snapshot/v8_context_snapshot.gni")
executable("node") {
  deps = [
    ":node_lib",
    "//build/config:exe_and_shlib_deps",
    "//v8:v8_libplatform",
  ]
  sources = [
    "src/node_main.cc",
  ]
  deps += [
    #"//tools/v8_context_snapshot:v8_context_snapshot",
  ]
}

action("v8_inspector_convert_protocol_to_json") {
  inputs = [
    "//v8/src/inspector/js_protocol.pdl",
  ]
  outputs = [
    "$target_gen_dir/js_protocol.json",
  ]
  script = "//v8/third_party/inspector_protocol/ConvertProtocolToJSON.py"
  args = rebase_path(inputs + outputs)
}

action("concatenate_protocols") {
  deps = [
    ":prepare_protocol_json",
    ":v8_inspector_convert_protocol_to_json",
  ]
  inputs = [
    "$target_gen_dir/js_protocol.json",
    "$target_gen_dir/node_protocol.json",
  ]
  outputs = [
    "$target_gen_dir/concatenated_protocol.json",
  ]
  script = "//v8/third_party/inspector_protocol/ConcatenateProtocols.py"
  args = rebase_path(inputs + outputs)
}

action("v8_inspector_compress_protocol_json") {
  deps = [
    ":concatenate_protocols",
  ]
  inputs = [
    "$target_gen_dir/concatenated_protocol.json",
  ]
  outputs = [
    "$target_gen_dir/v8_inspector_protocol_json.h",
  ]
  script = "tools/compress_json.py"
  args = rebase_path(inputs + outputs)
}
