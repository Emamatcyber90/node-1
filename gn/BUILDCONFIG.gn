is_node_standalone = true

declare_args() {
  is_component_build = false
  is_official_build = false

  ar = "ar"
  cc = "cc"
  cxx = "c++"
}

declare_args() {
  is_debug = !is_official_build
}

if (target_os == "") {
  target_os = host_os
}
if (current_os == "") {
  current_os = target_os
}

is_linux = current_os == "linux"
is_mac = current_os == "mac"
is_win = current_os == "win"

if (target_cpu == "") {
  target_cpu = host_cpu
}

if (current_cpu == "") {
  current_cpu = target_cpu
}

is_clang = is_mac || (cc == "clang" && cxx == "clang++")
# TODO: detect if is_clang using is_clang.py from skia

template("component") {
  if (is_component_build) {
    _component_mode = "shared_library"
  } else {
    _component_mode = "static_library"
  }

  target(_component_mode, target_name) {
    forward_variables_from(invoker, "*")
  }
}

default_configs = [
]
if (!is_debug) {
  default_configs += [
  ]
}
if (!is_official_build) {
  default_configs += [
  ]
}
default_configs += [
]

set_defaults("executable") {
  configs = [ "//gn:executable" ] + default_configs
}

set_defaults("source_set") {
  configs = default_configs
}

set_defaults("static_library") {
  configs = default_configs
}

set_defaults("shared_library") {
  configs = default_configs
}

set_defaults("component") {
  configs = default_configs
  if (!is_component_build) {
    complete_static_lib = true
  }
}

set_default_toolchain("//gn/toolchain:gcc_like")
default_toolchain_name = "gcc_like"
host_toolchain = "gcc_like_host"
